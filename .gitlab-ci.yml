include:
 - project: 'guidog/meta-phosh'
   ref: '891d0bd56c7288e8998c313426cf36a61e238a4e'
   file: '/ci/phosh-common-jobs.yml'
 - remote: 'https://gitlab.freedesktop.org/freedesktop/ci-templates/-/raw/d03cddbcff35f26861429fc816c00323f48e99af/templates/ci-fairy.yml'
stages:
 - build
 - test+docs
 - style-checks
 - package
 - deploy

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    # Don't trigger a branch pipeline if there is an open MR
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

default:
  # Protect CI infra from rogue jobs
  timeout: 15 minutes
  # Allow jobs to be caneled on new commits
  interruptible: true
  # Retry on infra hickups automatically
  retry:
    max: 1
    when:
      - 'api_failure'
      - 'runner_system_failure'
      - 'scheduler_failure'
      - 'stuck_or_timeout_failure'

variables:
  # For ci-fairy
  FDO_UPSTREAM_REPO: World/Phosh/phoc
  ALPINE_EDGE_DEPS: |
        git meson ninja gnome-desktop-dev gobject-introspection-dev
        libinput-dev wayland-dev wayland-protocols libxkbcommon-dev
        xwayland-dev json-glib-dev
  ALPINE_EDGE_WLROOTS_DEPS: |
        eudev-dev ffmpeg-dev glslang libdisplay-info-dev
        libliftoff-dev mesa-dev pixman-dev vulkan-headers vulkan-loader-dev
        wayland-dev wayland-protocols xcb-util-image-dev xcb-util-renderutil-dev
        xcb-util-wm-dev libseat-dev hwdata-dev libdisplay-info-dev
  XVFB_RUN: xvfb-run -s -noreset
  DEBIAN_IMAGE: $CI_REGISTRY/world/phosh/phoc/debian:v0.0.2025-02-16

.build: &build
  script:
    - export LC_ALL=C.UTF-8
    - meson setup _build $BUILD_ARGS
    - meson compile -C _build
    - meson install -C _build

.before_script_debian: &before_script_debian
  - rm -f ../* || true
  # Don't accidentally pull in system wlroots headers
  - eatmydata apt-get -y remove --purge "libwlroots-.*dev"
  - if [ -n "$SID_PKGS" ]; then
      echo "deb http://deb.debian.org/debian/ sid main" >> /etc/apt/sources.list.d/sid.list;
      eatmydata apt-get -y update;
      apt -y install $SID_PKGS;
    fi
  - dpkg -l

.before_script_alpine: &before_script_alpine
  - apk -q add alpine-sdk
  - apk -q add $ALPINE_EDGE_DEPS $ALPINE_EDGE_WLROOTS_DEPS

build-with-xwayland-debian-trixie:
  stage: build
  image: ${DEBIAN_IMAGE}
  before_script: *before_script_debian
  variables:
     BUILD_ARGS: -Dembed-wlroots=enabled -Dxwayland=enabled -Db_coverage=true
  <<: *build
  artifacts:
    paths:
      - _build

build-with-xwayland-debian-trixie-clang:
  stage: build
  image: ${DEBIAN_IMAGE}
  variables:
    CC: clang
    BUILD_ARGS: -Dembed-wlroots=enabled -Dxwayland=enabled --werror
  before_script: *before_script_debian
  <<: *build
  artifacts:
    paths:
      - _build

build-with-xwayland-alpinelinux-edge:
  stage: build
  image: alpine:edge
  before_script: *before_script_alpine
  variables:
     BUILD_ARGS: -Dembed-wlroots=enabled -Dxwayland=enabled
  <<: *build
  allow_failure: true

build-without-xwayland-alpinelinux-edge:
  stage: build
  image: alpine:edge
  before_script: *before_script_alpine
  variables:
     BUILD_ARGS: -Dembed-wlroots=enabled -Dxwayland=disabled
  <<: *build
  allow_failure: true

unit-test-with-xwayland-debian-trixie:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  needs:
    - build-with-xwayland-debian-trixie
  before_script: *before_script_debian
  script:
    - WLR_RENDERER=pixman ${XVFB_RUN} meson test --print-errorlogs -C _build
    - ninja -C _build coverage
  coverage: '/^lines:\s+([\d.]+\%)\s+/'
  artifacts:
    when: always
    reports:
      junit:
        - _build/meson-logs/testlog.junit.xml
    paths:
      - _build

asan-test-native-debian-trixie:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  tags: [ asan ]
  needs: []
  before_script: *before_script_debian
  script:
    - meson setup -Db_sanitize=address _build-asan
    - ninja -C _build-asan data/gschemas.compiled
    - WLR_RENDERER=pixman ${XVFB_RUN} meson test --verbose -C _build-asan
  allow_failure: true

scan-build-native-debian-trixie:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  needs:
    - build-with-xwayland-debian-trixie-clang
  before_script: *before_script_debian
  script:
    - "SCANBUILD=${PWD}/helpers/scan-build ninja -C _build scan-build"
  artifacts:
    when: on_failure
    paths:
      - _build/meson-logs/scanbuild/

build-gtkdoc:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  before_script: *before_script_debian
  variables:
    BUILD_ARGS: -Dgtk_doc=true -Dembed-wlroots=enabled
  script:
    - git clean -dfx
    - 'echo "Build opts: ${BUILD_ARGS}"'
    - meson . _build $BUILD_ARGS
    - helpers/doc-check _build
    - test -f _build/doc/phoc-*/index.html
    - mv _build/doc/phoc-*/ _reference/
  artifacts:
    paths:
      - _reference

check-po:
  stage: test+docs
  extends: .phosh-check-po

check-consistency:
  stage: test+docs
  extends: .phosh-check-consistency

check-format:
  stage: style-checks
  image: ${DEBIAN_IMAGE}
  needs: []
  before_script: *before_script_debian
  script:
    - |
      if [ -n "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" ]; then
        git remote add target $CI_MERGE_REQUEST_PROJECT_URL.git
        echo "Fetching MR target branch $CI_MERGE_REQUEST_TARGET_BRANCH_NAME from $CI_MERGE_REQUEST_PROJECT_URL"
        git fetch target "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
        git fetch --deepen=100 origin HEAD
        merge_base=$(git merge-base "target/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" HEAD)
        if [ -z "$merge_base" ]; then
          echo "Could't determine merge base"
          exit 1
        fi
        echo "Merge base: $merge_base"
        ./.gitlab-ci/check-style.py --dry-run --sha $merge_base
      else
        echo "Not a merge request"
      fi
  allow_failure: true

# Sanity checks of MR settings and commit logs
check-commit-log:
  extends:
    - .fdo.ci-fairy
  stage: style-checks
  variables:
    GIT_DEPTH: "100"
  needs: []
  script: |
    ci-fairy check-commits --junit-xml=commit-message-junit-report.xml
  artifacts:
    reports:
      junit: commit-message-junit-report.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'

check-license:
  stage: style-checks
  image: ${DEBIAN_IMAGE}
  needs: []
  before_script:
    - eatmydata apt-get update
    - eatmydata apt-get -y install reuse
  script:
    reuse lint
  artifacts:
    paths:
      - _build

check-markdown:
  stage: style-checks
  variables:
    PHOSH_MARKDOWN_PATHS: "*.md doc/*.md"
  extends:
    - .phosh-check-markdown

package-deb-debian-trixie:arm64:
  stage: package
  variables:
    PHOSH_DOCKER_IMAGE: debian:trixie
    DEB_BUILD_PROFILES: 'pkg.phoc.embedwlroots'
  extends: .phosh-build-debian-package
  tags:
    - aarch64

package-deb-debian-trixie:sanitizers:arm64:
  stage: package
  variables:
    PHOSH_DOCKER_IMAGE: debian:trixie
    DEB_BUILD_PROFILES: 'pkg.phoc.embedwlroots pkg.phoc.sanitizers'
  extends: .phosh-build-debian-package
  tags:
    - aarch64
  when: manual

pages:
  stage: deploy
  needs:
    - build-gtkdoc
  script:
    - mv _reference/ public/
  artifacts:
    paths:
      - public
  only:
    - main
